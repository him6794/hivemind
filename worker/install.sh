#!/bin/bash
set -e
echo '📁 建立資料夾 hivemind_worker/templates...'
mkdir -p hivemind_worker/templates
cd hivemind_worker
echo '🔧 建立 ./worker_node.py ...'
base64 -d > "./worker_node.py" << 'EOF_worker_node.py'

EOF_worker_node.py
echo '🔧 建立 ./requirements.txt ...'
base64 -d > "./requirements.txt" << 'EOF_requirements.txt'
ZG9ja2VyPT03LjEuMA0KZ3JwY2lvPT0xLjY2LjENCmdycGNpby10b29scz09MS42Ni4xDQpmbGFzaz09My4wLjMNCnBzdXRpbD09Ni4wLjANCm5ldGlmYWNlcz09MC4xMS4wDQpyZXF1ZXN0cz09Mi4zMi4z
EOF_requirements.txt
echo '🔧 建立 ./templates/login.html ...'
base64 -d > "./templates/login.html" << 'EOF_templates/login.html'
PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJ6aC1UVyI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPg0KICAgIDx0aXRsZT7lt6XkvZznr4Dpu57nmbvlhaU8L3RpdGxlPg0KICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NTAwOzYwMDs3MDAmZGlzcGxheT1zd2FwIiByZWw9InN0eWxlc2hlZXQiPg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzYuMC4wL2Nzcy9hbGwubWluLmNzcyI+DQogICAgPHN0eWxlPg0KICAgICAgICA6cm9vdCB7DQogICAgICAgICAgICAtLXByaW1hcnktY29sb3I6ICM2NDc0OGI7DQogICAgICAgICAgICAtLXNlY29uZGFyeS1jb2xvcjogIzQ3NTU2OTsNCiAgICAgICAgICAgIC0tYWNjZW50LWNvbG9yOiAjMzc0MTUxOw0KICAgICAgICAgICAgLS1iYWNrZ3JvdW5kLWNvbG9yOiAjZjhmYWZjOw0KICAgICAgICAgICAgLS1jYXJkLWJhY2tncm91bmQ6ICNmZmZmZmY7DQogICAgICAgICAgICAtLXRleHQtY29sb3I6ICMxZTI5M2I7DQogICAgICAgICAgICAtLXRleHQtc2Vjb25kYXJ5OiAjNjQ3NDhiOw0KICAgICAgICAgICAgLS10ZXh0LW11dGVkOiAjOTRhM2I4Ow0KICAgICAgICAgICAgLS1ib3JkZXItY29sb3I6ICNlMmU4ZjA7DQogICAgICAgICAgICAtLWJvcmRlci1saWdodDogI2YxZjVmOTsNCiAgICAgICAgICAgIC0tZXJyb3ItY29sb3I6ICNkYzI2MjY7DQogICAgICAgICAgICAtLXN1Y2Nlc3MtY29sb3I6ICMwNTk2Njk7DQogICAgICAgICAgICAtLXdhcm5pbmctY29sb3I6ICNkOTc3MDY7DQogICAgICAgICAgICAtLXNoYWRvdy14czogMCAxcHggMnB4IDAgcmdiKDAgMCAwIC8gMC4wNSk7DQogICAgICAgICAgICAtLXNoYWRvdy1zbTogMCAxcHggM3B4IDAgcmdiKDAgMCAwIC8gMC4xKSwgMCAxcHggMnB4IC0xcHggcmdiKDAgMCAwIC8gMC4xKTsNCiAgICAgICAgICAgIC0tc2hhZG93LW1kOiAwIDRweCA2cHggLTFweCByZ2IoMCAwIDAgLyAwLjEpLCAwIDJweCA0cHggLTJweCByZ2IoMCAwIDAgLyAwLjEpOw0KICAgICAgICAgICAgLS1zaGFkb3ctbGc6IDAgMTBweCAxNXB4IC0zcHggcmdiKDAgMCAwIC8gMC4xKSwgMCA0cHggNnB4IC00cHggcmdiKDAgMCAwIC8gMC4xKTsNCiAgICAgICAgICAgIC0tZ3JhZGllbnQtc3VidGxlOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjZjhmYWZjIDAlLCAjZjFmNWY5IDEwMCUpOw0KICAgICAgICB9DQoNCiAgICAgICAgKiB7DQogICAgICAgICAgICBtYXJnaW46IDA7DQogICAgICAgICAgICBwYWRkaW5nOiAwOw0KICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICAgICAgfQ0KDQogICAgICAgIGJvZHkgew0KICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgIlNlZ29lIFVJIiwgUm9ib3RvLCBzYW5zLXNlcmlmOw0KICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7DQogICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7DQogICAgICAgICAgICBsaW5lLWhlaWdodDogMS42Ow0KICAgICAgICAgICAgbWluLWhlaWdodDogMTAwdmg7DQogICAgICAgICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgICAgICAgICAgcGFkZGluZzogMXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIGJvZHk6OmJlZm9yZSB7DQogICAgICAgICAgICBjb250ZW50OiAnJzsNCiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICAgIHRvcDogMDsNCiAgICAgICAgICAgIGxlZnQ6IDA7DQogICAgICAgICAgICByaWdodDogMDsNCiAgICAgICAgICAgIGJvdHRvbTogMDsNCiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWdyYWRpZW50LXN1YnRsZSk7DQogICAgICAgICAgICBvcGFjaXR5OiAwLjU7DQogICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5sb2dpbi1jb250YWluZXIgew0KICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY2FyZC1iYWNrZ3JvdW5kKTsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDE2cHg7DQogICAgICAgICAgICBib3gtc2hhZG93OiB2YXIoLS1zaGFkb3ctbGcpOw0KICAgICAgICAgICAgcGFkZGluZzogM3JlbTsNCiAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgbWF4LXdpZHRoOiA0MjBweDsNCiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1saWdodCk7DQogICAgICAgICAgICBhbmltYXRpb246IHNsaWRlVXAgMC42cyBlYXNlLW91dDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5sb2dpbi1jb250YWluZXI6OmJlZm9yZSB7DQogICAgICAgICAgICBjb250ZW50OiAnJzsNCiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICAgIHRvcDogMDsNCiAgICAgICAgICAgIGxlZnQ6IDA7DQogICAgICAgICAgICByaWdodDogMDsNCiAgICAgICAgICAgIGhlaWdodDogMXB4Ow0KICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkwZGVnLCB0cmFuc3BhcmVudCAwJSwgdmFyKC0tYm9yZGVyLWNvbG9yKSA1MCUsIHRyYW5zcGFyZW50IDEwMCUpOw0KICAgICAgICB9DQoNCiAgICAgICAgLmxvZ2luLWhlYWRlciB7DQogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyLjVyZW07DQogICAgICAgIH0NCg0KICAgICAgICAubG9naW4taGVhZGVyIC5pY29uIHsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMi41cmVtOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpOw0KICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTsNCiAgICAgICAgICAgIG9wYWNpdHk6IDAuODsNCiAgICAgICAgfQ0KDQogICAgICAgIC5sb2dpbi1oZWFkZXIgaDEgew0KICAgICAgICAgICAgZm9udC1zaXplOiAxLjg3NXJlbTsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQogICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7DQogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07DQogICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogLTAuMDI1ZW07DQogICAgICAgIH0NCg0KICAgICAgICAubG9naW4taGVhZGVyIHAgew0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5KTsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC45NXJlbTsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7DQogICAgICAgIH0NCg0KICAgICAgICAuc3RhdHVzLW1lc3NhZ2Ugew0KICAgICAgICAgICAgcGFkZGluZzogMC44NzVyZW0gMXJlbTsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTsNCiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7DQogICAgICAgICAgICBmb250LXNpemU6IDAuODc1cmVtOw0KICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQ7DQogICAgICAgIH0NCg0KICAgICAgICAuZXJyb3ItbWVzc2FnZSB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmVmMmYyOw0KICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmVjYWNhOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLWVycm9yLWNvbG9yKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5zdWNjZXNzLW1lc3NhZ2Ugew0KICAgICAgICAgICAgYmFja2dyb3VuZDogI2VjZmRmNTsNCiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2E3ZjNkMDsNCiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1zdWNjZXNzLWNvbG9yKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5pbmZvLW1lc3NhZ2Ugew0KICAgICAgICAgICAgYmFja2dyb3VuZDogI2Y4ZmFmYzsNCiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tYm9yZGVyLWNvbG9yKTsNCiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LXNlY29uZGFyeSk7DQogICAgICAgIH0NCg0KICAgICAgICAuZm9ybS1ncm91cCB7DQogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjI1cmVtOw0KICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgICAgICB9DQoNCiAgICAgICAgLmZvcm0tZ3JvdXAgbGFiZWwgew0KICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7DQogICAgICAgICAgICBmb250LXdlaWdodDogNTAwOw0KICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpOw0KICAgICAgICAgICAgZm9udC1zaXplOiAwLjg3NXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5pbnB1dC13cmFwcGVyIHsNCiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5pbnB1dC13cmFwcGVyIGkgew0KICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgICAgICAgICAgbGVmdDogMC44NzVyZW07DQogICAgICAgICAgICB0b3A6IDUwJTsNCiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsNCiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5mb3JtLWdyb3VwIGlucHV0IHsNCiAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgcGFkZGluZzogMC44NzVyZW0gMC44NzVyZW0gMC44NzVyZW0gMi41cmVtOw0KICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC45NXJlbTsNCiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7DQogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jYXJkLWJhY2tncm91bmQpOw0KICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpOw0KICAgICAgICB9DQoNCiAgICAgICAgLmZvcm0tZ3JvdXAgaW5wdXQ6OnBsYWNlaG9sZGVyIHsNCiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5mb3JtLWdyb3VwIGlucHV0OmZvY3VzIHsNCiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7DQogICAgICAgICAgICBib3JkZXItY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpOw0KICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgM3B4IHJnYigxMDAgMTE2IDEzOSAvIDAuMSk7DQogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jYXJkLWJhY2tncm91bmQpOw0KICAgICAgICB9DQoNCiAgICAgICAgLnN1Ym1pdC1idG4gew0KICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICBwYWRkaW5nOiAwLjg3NXJlbTsNCiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXRleHQtY29sb3IpOw0KICAgICAgICAgICAgY29sb3I6IHdoaXRlOw0KICAgICAgICAgICAgYm9yZGVyOiBub25lOw0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4Ow0KICAgICAgICAgICAgZm9udC1zaXplOiAwLjk1cmVtOw0KICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsNCiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7DQogICAgICAgICAgICBtYXJnaW4tdG9wOiAwLjVyZW07DQogICAgICAgIH0NCg0KICAgICAgICAuc3VibWl0LWJ0bjpob3ZlciB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTsNCiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMXB4KTsNCiAgICAgICAgICAgIGJveC1zaGFkb3c6IHZhcigtLXNoYWRvdy1tZCk7DQogICAgICAgIH0NCg0KICAgICAgICAuc3VibWl0LWJ0bjphY3RpdmUgew0KICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOw0KICAgICAgICB9DQoNCiAgICAgICAgLmZvb3Rlci10ZXh0IHsNCiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgICAgIG1hcmdpbi10b3A6IDJyZW07DQogICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7DQogICAgICAgICAgICBmb250LXNpemU6IDAuODEyNXJlbTsNCiAgICAgICAgfQ0KDQogICAgICAgIEBrZXlmcmFtZXMgc2xpZGVVcCB7DQogICAgICAgICAgICBmcm9tIHsNCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwOw0KICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgyMHB4KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRvIHsNCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxOw0KICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0ODBweCkgew0KICAgICAgICAgICAgLmxvZ2luLWNvbnRhaW5lciB7DQogICAgICAgICAgICAgICAgbWFyZ2luOiAxcmVtOw0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5sb2dpbi1oZWFkZXIgaDEgew0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41cmVtOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgPC9zdHlsZT4NCjwvaGVhZD4NCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9ImxvZ2luLWNvbnRhaW5lciI+DQogICAgICAgIDxkaXYgY2xhc3M9ImxvZ2luLWhlYWRlciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4NCiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNlcnZlciI+PC9pPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8aDE+5bel5L2c56+A6bue55m75YWlPC9oMT4NCiAgICAgICAgICAgIDxwPumAo+aOpeWIsCBIaXZlTWluZCDliIbmlaPlvI/oqIjnrpfntrLot688L3A+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIHslIGlmIGN1cnJlbnRfc3RhdHVzICV9DQogICAgICAgIDxkaXYgY2xhc3M9InN0YXR1cy1tZXNzYWdlIHslIGlmICdFcnJvcicgaW4gY3VycmVudF9zdGF0dXMgJX1lcnJvci1tZXNzYWdleyUgZWxpZiAnSWRsZScgaW4gY3VycmVudF9zdGF0dXMgJX1zdWNjZXNzLW1lc3NhZ2V7JSBlbHNlICV9aW5mby1tZXNzYWdleyUgZW5kaWYgJX0iPg0KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1pbmZvLWNpcmNsZSI+PC9pPg0KICAgICAgICAgICAg56+A6bue54uA5oWLOiB7eyBjdXJyZW50X3N0YXR1cyB9fQ0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgeyUgZW5kaWYgJX0NCg0KICAgICAgICB7JSBpZiBlcnJvciAlfQ0KICAgICAgICA8ZGl2IGNsYXNzPSJzdGF0dXMtbWVzc2FnZSBlcnJvci1tZXNzYWdlIj4NCiAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlIj48L2k+DQogICAgICAgICAgICB7eyBlcnJvciB9fQ0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgeyUgZW5kaWYgJX0NCg0KICAgICAgICA8Zm9ybSBtZXRob2Q9InBvc3QiIGFjdGlvbj0ie3sgdXJsX2ZvcignbG9naW5fcm91dGUnKSB9fSI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ1c2VybmFtZSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdXNlciI+PC9pPg0KICAgICAgICAgICAgICAgICAgICDnlKjmiLblkI3nqLENCiAgICAgICAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXVzZXIiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ1c2VybmFtZSIgbmFtZT0idXNlcm5hbWUiIHJlcXVpcmVkIGF1dG9jb21wbGV0ZT0idXNlcm5hbWUiIHBsYWNlaG9sZGVyPSLoq4vovLjlhaXmgqjnmoTnlKjmiLblkI0iPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwYXNzd29yZCI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbG9jayI+PC9pPg0KICAgICAgICAgICAgICAgICAgICDlr4bnorwNCiAgICAgICAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWxvY2siPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBpZD0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkIiByZXF1aXJlZCBhdXRvY29tcGxldGU9ImN1cnJlbnQtcGFzc3dvcmQiIHBsYWNlaG9sZGVyPSLoq4vovLjlhaXmgqjnmoTlr4bnorwiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9InN1Ym1pdC1idG4iPg0KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc2lnbi1pbi1hbHQiPjwvaT4NCiAgICAgICAgICAgICAgICDnmbvlhaXkuKboqLvlhornr4Dpu54NCiAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8L2Zvcm0+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRleHQiPg0KICAgICAgICAgICAg55m75YWl5b6M5bCH6Ieq5YuV6Ki75YaK5q2k6Kit5YKZ54K65bel5L2c56+A6buePGJyPg0KICAgICAgICAgICAgPHNtYWxsIHN0eWxlPSJjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7IGZvbnQtc2l6ZTogMC43NXJlbTsiPg0KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbWFwLW1hcmtlci1hbHQiPjwvaT4NCiAgICAgICAgICAgICAgICDlpoLpnIDkv67mlLnlnLDljYDoqK3lrprvvIzoq4vph43mlrDllZ/li5Xnr4Dpu57nqIvlvI8NCiAgICAgICAgICAgIDwvc21hbGw+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg==
EOF_templates/login.html
echo '🔧 建立 ./templates/monitor.html ...'
base64 -d > "./templates/monitor.html" << 'EOF_templates/monitor.html'

EOF_templates/monitor.html
echo '🔧 建立 ./nodepool.proto ...'
base64 -d > "./nodepool.proto" << 'EOF_nodepool.proto'

EOF_nodepool.proto
echo '🔧 建立 ./static/js/monitor.js ...'
base64 -d > "./static/js/monitor.js" << 'EOF_static/js/monitor.js'
JChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7DQogICAgLy8g5YuV5oWL5qqi5risQVBJ5Zyw5Z2ADQogICAgY29uc3QgQVBJX0JBU0VfVVJMID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbjsNCg0KICAgIC8vIOWIneWni+WMliBDaGFydC5qcyDlnJbooagNCiAgICBjb25zdCBjcHVDaGFydEN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcHVDaGFydCcpLmdldENvbnRleHQoJzJkJyk7DQogICAgY29uc3QgbWVtb3J5Q2hhcnRDdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVtb3J5Q2hhcnQnKS5nZXRDb250ZXh0KCcyZCcpOw0KDQogICAgbGV0IGNwdUNoYXJ0ID0gbnVsbDsNCiAgICBsZXQgbWVtb3J5Q2hhcnQgPSBudWxsOw0KDQogICAgdHJ5IHsNCiAgICAgICAgLy8gQ2hhcnQuanMg5Yid5aeL5YyWIENQVSDlnJbooagNCiAgICAgICAgY3B1Q2hhcnQgPSBuZXcgQ2hhcnQoY3B1Q2hhcnRDdHgsIHsNCiAgICAgICAgICAgIHR5cGU6ICdsaW5lJywNCiAgICAgICAgICAgIGRhdGE6IHsgDQogICAgICAgICAgICAgICAgbGFiZWxzOiBbXSwgDQogICAgICAgICAgICAgICAgZGF0YXNldHM6IFt7IA0KICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NQVSDkvb/nlKjnjocgKCUpJywgDQogICAgICAgICAgICAgICAgICAgIGRhdGE6IFtdLCANCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjNjM2NmYxJywNCiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSg5OSwgMTAyLCAyNDEsIDAuMSknLA0KICAgICAgICAgICAgICAgICAgICBmaWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uOiAwLjQsDQogICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAzLA0KICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJyM2MzY2ZjEnLA0KICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAnI2ZmZmZmZicsDQogICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiA1LA0KICAgICAgICAgICAgICAgICAgICBwb2ludEhvdmVyUmFkaXVzOiA3DQogICAgICAgICAgICAgICAgfV0gDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgb3B0aW9uczogeyANCiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLA0KICAgICAgICAgICAgICAgIGludGVyYWN0aW9uOiB7DQogICAgICAgICAgICAgICAgICAgIGludGVyc2VjdDogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgIG1vZGU6ICdpbmRleCcNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHNjYWxlczogeyANCiAgICAgICAgICAgICAgICAgICAgeDogeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfmmYLplpMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzY0NzQ4YicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogeyB3ZWlnaHQ6ICdib2xkJyB9DQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZDogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgxNDgsIDE2MywgMTg0LCAwLjEpJw0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tzOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjQ3NDhiJw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LCANCiAgICAgICAgICAgICAgICAgICAgeTogeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdDUFUg5L2/55So546HICglKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjQ3NDhiJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7IHdlaWdodDogJ2JvbGQnIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIA0KICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsIA0KICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkTWF4OiAxMDAsDQogICAgICAgICAgICAgICAgICAgICAgICBncmlkOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDE0OCwgMTYzLCAxODQsIDAuMSknDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgdGlja3M6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2NDc0OGInDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBwbHVnaW5zOiB7DQogICAgICAgICAgICAgICAgICAgIGxlZ2VuZDogew0KICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wJywNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsczogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZVBvaW50U3R5bGU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMjAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMWUyOTNiJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7IHdlaWdodDogJ2JvbGQnIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogew0KICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgxNSwgMjMsIDQyLCAwLjkpJywNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlQ29sb3I6ICcjZjFmNWY5JywNCiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlDb2xvcjogJyNmMWY1ZjknLA0KICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjNjM2NmYxJywNCiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLA0KICAgICAgICAgICAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiA4LA0KICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUNvbG9yczogZmFsc2UNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQoNCiAgICAgICAgLy8gQ2hhcnQuanMg5Yid5aeL5YyW6KiY5oa26auU5ZyW6KGoDQogICAgICAgIG1lbW9yeUNoYXJ0ID0gbmV3IENoYXJ0KG1lbW9yeUNoYXJ0Q3R4LCB7DQogICAgICAgICAgICB0eXBlOiAnbGluZScsDQogICAgICAgICAgICBkYXRhOiB7IA0KICAgICAgICAgICAgICAgIGxhYmVsczogW10sIA0KICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbeyANCiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICfoqJjmhrbpq5Tkvb/nlKjnjocgKCUpJywgDQogICAgICAgICAgICAgICAgICAgIGRhdGE6IFtdLCANCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjOGI1Y2Y2JywNCiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgxMzksIDkyLCAyNDYsIDAuMSknLA0KICAgICAgICAgICAgICAgICAgICBmaWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICB0ZW5zaW9uOiAwLjQsDQogICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAzLA0KICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJyM4YjVjZjYnLA0KICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAnI2ZmZmZmZicsDQogICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiA1LA0KICAgICAgICAgICAgICAgICAgICBwb2ludEhvdmVyUmFkaXVzOiA3DQogICAgICAgICAgICAgICAgfV0gDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgb3B0aW9uczogeyANCiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLA0KICAgICAgICAgICAgICAgIGludGVyYWN0aW9uOiB7DQogICAgICAgICAgICAgICAgICAgIGludGVyc2VjdDogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgIG1vZGU6ICdpbmRleCcNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHNjYWxlczogeyANCiAgICAgICAgICAgICAgICAgICAgeDogeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfmmYLplpMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzY0NzQ4YicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogeyB3ZWlnaHQ6ICdib2xkJyB9DQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZDogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgxNDgsIDE2MywgMTg0LCAwLjEpJw0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tzOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjQ3NDhiJw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LCANCiAgICAgICAgICAgICAgICAgICAgeTogeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfoqJjmhrbpq5Tkvb/nlKjnjocgKCUpJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2NDc0OGInLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IHsgd2VpZ2h0OiAnYm9sZCcgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSwgDQogICAgICAgICAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSwgDQogICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRNYXg6IDEwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQ6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMTQ4LCAxNjMsIDE4NCwgMC4xKScNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICB0aWNrczogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzY0NzQ4YicNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHBsdWdpbnM6IHsNCiAgICAgICAgICAgICAgICAgICAgbGVnZW5kOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3AnLA0KICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxzOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlUG9pbnRTdHlsZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMxZTI5M2InLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IHsgd2VpZ2h0OiAnYm9sZCcgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDE1LCAyMywgNDIsIDAuOSknLA0KICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVDb2xvcjogJyNmMWY1ZjknLA0KICAgICAgICAgICAgICAgICAgICAgICAgYm9keUNvbG9yOiAnI2YxZjVmOScsDQogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyM4YjVjZjYnLA0KICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsDQogICAgICAgICAgICAgICAgICAgICAgICBjb3JuZXJSYWRpdXM6IDgsDQogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Q29sb3JzOiBmYWxzZQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgICAgDQogICAgICAgIGNvbnNvbGUubG9nKCLlnJbooajliJ3lp4vljJbmiJDlip8iKTsNCiAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCLlnJbooajliJ3lp4vljJblpLHmlZc6IiwgZXJyb3IpOw0KICAgICAgICAkKCcuY2hhcnQtY29udGFpbmVyJykuaHRtbCgnPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1lcnJvciI+5ZyW6KGo5Yid5aeL5YyW5aSx5pWX77yM6KuL5qqi5p+l5o6n5Yi25Y+w5pel6KqM44CCPC9kaXY+Jyk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdXBkYXRlU3RhdHVzKCkgew0KICAgICAgICAkLmdldChgJHtBUElfQkFTRV9VUkx9L2FwaS9zdGF0dXNgLCBmdW5jdGlvbihkYXRhKSB7DQogICAgICAgICAgICBpZiAoZGF0YS5lcnJvcikgew0KICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yIGZyb20gL2FwaS9zdGF0dXM6IiwgZGF0YS5lcnJvcik7DQogICAgICAgICAgICAgICAgJCgnI3Rhc2stc3RhdHVzJykudGV4dCgnRXJyb3IgbG9hZGluZyBzdGF0dXMnKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdzdGF0dXMgZXJyb3InKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIOabtOaWsOeLgOaFi+mhr+ekug0KICAgICAgICAgICAgJCgnI25vZGUtaWQnKS50ZXh0KGRhdGEubm9kZV9pZCB8fCAnTi9BJyk7DQogICAgICAgICAgICAkKCcjdGFzay1pZCcpLnRleHQoZGF0YS5jdXJyZW50X3Rhc2tfaWQgfHwgJ05vbmUnKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8g5pu05paw54uA5oWL5qiZ57Gk5qij5byPDQogICAgICAgICAgICBjb25zdCBzdGF0dXNFbGVtZW50ID0gJCgnI3Rhc2stc3RhdHVzJyk7DQogICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBkYXRhLnN0YXR1cyB8fCAnSWRsZSc7DQogICAgICAgICAgICBzdGF0dXNFbGVtZW50LnRleHQoc3RhdHVzKS5yZW1vdmVDbGFzcygpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAoc3RhdHVzLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2lkbGUnKSkgew0KICAgICAgICAgICAgICAgIHN0YXR1c0VsZW1lbnQuYWRkQ2xhc3MoJ3N0YXR1cyBpZGxlJyk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdydW5uaW5nJykgfHwgc3RhdHVzLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2V4ZWN1dGluZycpKSB7DQogICAgICAgICAgICAgICAgc3RhdHVzRWxlbWVudC5hZGRDbGFzcygnc3RhdHVzIHJ1bm5pbmcnKTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2Vycm9yJykgfHwgc3RhdHVzLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2ZhaWxlZCcpKSB7DQogICAgICAgICAgICAgICAgc3RhdHVzRWxlbWVudC5hZGRDbGFzcygnc3RhdHVzIGVycm9yJyk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHN0YXR1c0VsZW1lbnQuYWRkQ2xhc3MoJ3N0YXR1cyBwZW5kaW5nJyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICQoJyNpcC1hZGRyZXNzJykudGV4dChkYXRhLmlwIHx8ICdOL0EnKTsNCiAgICAgICAgICAgICQoJyNjcHQtYmFsYW5jZScpLnRleHQoZGF0YS5jcHRfYmFsYW5jZSB8fCAwKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgY29uc3QgY3B1UGVyY2VudCA9IGRhdGEuY3B1X3BlcmNlbnQgfHwgMDsNCiAgICAgICAgICAgIGNvbnN0IG1lbW9yeVBlcmNlbnQgPSBkYXRhLm1lbW9yeV9wZXJjZW50IHx8IDA7DQogICAgICAgICAgICANCiAgICAgICAgICAgICQoJyNjcHUtdXNhZ2UnKS50ZXh0KGNwdVBlcmNlbnQgKyAnJScpOw0KICAgICAgICAgICAgJCgnI21lbW9yeS11c2FnZScpLnRleHQobWVtb3J5UGVyY2VudCArICclJyk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIOabtOaWsOizh+a6kOWNoeeJhw0KICAgICAgICAgICAgJCgnI2NwdS1tZXRyaWMnKS50ZXh0KGNwdVBlcmNlbnQgKyAnJScpOw0KICAgICAgICAgICAgJCgnI21lbW9yeS1tZXRyaWMnKS50ZXh0KG1lbW9yeVBlcmNlbnQgKyAnJScpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpOw0KDQogICAgICAgICAgICAvLyDmm7TmlrDlnJbooajmlbjmk5oNCiAgICAgICAgICAgIGlmIChjcHVDaGFydCAmJiBjcHVDaGFydC5kYXRhICYmIGNwdUNoYXJ0LmRhdGEubGFiZWxzKSB7DQogICAgICAgICAgICAgICAgY3B1Q2hhcnQuZGF0YS5sYWJlbHMucHVzaChub3cpOw0KICAgICAgICAgICAgICAgIGNwdUNoYXJ0LmRhdGEuZGF0YXNldHNbMF0uZGF0YS5wdXNoKGNwdVBlcmNlbnQpOw0KDQogICAgICAgICAgICAgICAgaWYgKGNwdUNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aCA+IDIwKSB7DQogICAgICAgICAgICAgICAgICAgIGNwdUNoYXJ0LmRhdGEubGFiZWxzLnNoaWZ0KCk7DQogICAgICAgICAgICAgICAgICAgIGNwdUNoYXJ0LmRhdGEuZGF0YXNldHNbMF0uZGF0YS5zaGlmdCgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjcHVDaGFydC51cGRhdGUoJ25vbmUnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKG1lbW9yeUNoYXJ0ICYmIG1lbW9yeUNoYXJ0LmRhdGEgJiYgbWVtb3J5Q2hhcnQuZGF0YS5sYWJlbHMpIHsNCiAgICAgICAgICAgICAgICBtZW1vcnlDaGFydC5kYXRhLmxhYmVscy5wdXNoKG5vdyk7DQogICAgICAgICAgICAgICAgbWVtb3J5Q2hhcnQuZGF0YS5kYXRhc2V0c1swXS5kYXRhLnB1c2gobWVtb3J5UGVyY2VudCk7DQoNCiAgICAgICAgICAgICAgICBpZiAobWVtb3J5Q2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoID4gMjApIHsNCiAgICAgICAgICAgICAgICAgICAgbWVtb3J5Q2hhcnQuZGF0YS5sYWJlbHMuc2hpZnQoKTsNCiAgICAgICAgICAgICAgICAgICAgbWVtb3J5Q2hhcnQuZGF0YS5kYXRhc2V0c1swXS5kYXRhLnNoaWZ0KCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG1lbW9yeUNoYXJ0LnVwZGF0ZSgnbm9uZScpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7DQogICAgICAgICAgICBjb25zb2xlLmVycm9yKCJGYWlsZWQgdG8gZmV0Y2ggL2FwaS9zdGF0dXM6IiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pOw0KICAgICAgICAgICAgJCgnI3Rhc2stc3RhdHVzJykudGV4dCgnQ29ubmVjdGlvbiBFcnJvcicpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ3N0YXR1cyBlcnJvcicpOw0KDQogICAgICAgICAgICBpZiAoanFYSFIuc3RhdHVzID09PSA0MDEpIHsNCiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oIuacg+ipseW3sumBjuacn++8jDPnp5Llvozph43mlrDlsI7lkJHnmbvlhaXpoIHpnaIiKTsNCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvbG9naW4nOw0KICAgICAgICAgICAgICAgIH0sIDMwMDApOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB1cGRhdGVMb2dzKCkgew0KICAgICAgICAkLmdldChgJHtBUElfQkFTRV9VUkx9L2FwaS9sb2dzYCwgZnVuY3Rpb24oZGF0YSkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coIuaXpeiqjOaVuOaTmjoiLCBkYXRhKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3IpIHsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBmcm9tIC9hcGkvbG9nczoiLCBkYXRhLmVycm9yKTsNCiAgICAgICAgICAgICAgICAkKCcjbG9ncycpLmh0bWwoYDxkaXYgY2xhc3M9InRleHQtZXJyb3IiPui8ieWFpeaXpeiqjOmMr+iqpDogJHtkYXRhLmVycm9yfTwvZGl2PmApOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgY29uc3QgbG9nc0RpdiA9ICQoJyNsb2dzJyk7DQogICAgICAgICAgICBsb2dzRGl2LmVtcHR5KCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIChkYXRhLmxvZ3MgJiYgQXJyYXkuaXNBcnJheShkYXRhLmxvZ3MpKSB7DQogICAgICAgICAgICAgICAgaWYgKGRhdGEubG9ncy5sZW5ndGggPT09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgbG9nc0Rpdi5odG1sKCc8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciIgc3R5bGU9Im9wYWNpdHk6IDAuNzsiPuebruWJjeaykuacieaXpeiqjOiomOmMhDwvZGl2PicpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRhdGEubG9ncy5mb3JFYWNoKGxvZyA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2dFbnRyeSA9ICQoJzxkaXY+JykudGV4dChsb2cpLmFkZENsYXNzKCdsb2ctZW50cnknKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ3NEaXYuYXBwZW5kKGxvZ0VudHJ5KTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIC8vIOiHquWLlea7vuWLleWIsOW6lemDqA0KICAgICAgICAgICAgICAgICAgICBsb2dzRGl2LnNjcm9sbFRvcChsb2dzRGl2WzBdLnNjcm9sbEhlaWdodCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oIuaXpeiqjOaVuOaTmuagvOW8j+eVsOW4uDoiLCBkYXRhKTsNCiAgICAgICAgICAgICAgICBsb2dzRGl2Lmh0bWwoJzxkaXYgY2xhc3M9InRleHQtd2FybmluZyI+5pyq5pS25Yiw5pyJ5pWI55qE5pel6KqM5pW45pOaPC9kaXY+Jyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7DQogICAgICAgICAgICBjb25zb2xlLmVycm9yKCJGYWlsZWQgdG8gZmV0Y2ggL2FwaS9sb2dzOiIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKTsNCiAgICAgICAgICAgICQoJyNsb2dzJykuaHRtbChgPGRpdiBjbGFzcz0idGV4dC1lcnJvciI+6LyJ5YWl5pel6KqM6Yyv6KqkOiAke3RleHRTdGF0dXN9ICgke2pxWEhSLnN0YXR1c30pPC9kaXY+YCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIChqcVhIUi5zdGF0dXMgPT09IDQwMSkgew0KICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybigi5pyD6Kmx5bey6YGO5pyf77yMM+enkuW+jOmHjeaWsOWwjuWQkeeZu+WFpemggemdoiIpOw0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9sb2dpbic7DQogICAgICAgICAgICAgICAgfSwgMzAwMCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vIOWIneWni+WKoOi8iQ0KICAgIHVwZGF0ZVN0YXR1cygpOw0KICAgIHVwZGF0ZUxvZ3MoKTsNCiAgICANCiAgICAvLyDlrprmnJ/mm7TmlrANCiAgICBzZXRJbnRlcnZhbCh1cGRhdGVTdGF0dXMsIDMwMDApOyAgLy8g5q+PM+enkuabtOaWsOeLgOaFiw0KICAgIHNldEludGVydmFsKHVwZGF0ZUxvZ3MsIDUwMDApOyAgICAvLyDmr48156eS5pu05paw5pel6KqMDQoNCiAgICAvLyDlhajlsYDlh73mlbgNCiAgICB3aW5kb3cucmVmcmVzaFN0YXR1cyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICBjb25zb2xlLmxvZygi5omL5YuV5Yi35paw54uA5oWLIik7DQogICAgICAgIHVwZGF0ZVN0YXR1cygpOw0KICAgIH0NCg0KICAgIHdpbmRvdy5yZWZyZXNoTG9ncyA9IGZ1bmN0aW9uKCkgew0KICAgICAgICBjb25zb2xlLmxvZygi5omL5YuV5Yi35paw5pel6KqMIik7DQogICAgICAgIHVwZGF0ZUxvZ3MoKTsNCiAgICB9DQp9KTs=
EOF_static/js/monitor.js
echo '🐍 建立虛擬環境...'
python3 -m venv venv
source venv/bin/activate
echo '📦 安裝依賴...'
pip install --upgrade pip
pip install -r requirements.txt
python3 -m grpc_tools.protoc --proto_path=. --python_out=. --grpc_python_out=. nodepool.proto
sudo apt install wireguard
echo '🐳 檢查是否已安裝 Docker...'
if ! command -v docker &> /dev/null; then
    echo '📦 Docker 未安裝，正在安裝...'
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo systemctl start docker
    sudo systemctl enable docker
else
    echo '✅ Docker 已安裝，略過安裝步驟。'
fi
echo '🚀 啟動 worker_node.py...'
python3 worker_node.py