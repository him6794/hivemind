# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import nodepool_pb2 as nodepool__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in nodepool_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NodeManagerServiceStub(object):
    """節點管理服務
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorkerNode = channel.unary_unary(
                '/nodepool.NodeManagerService/RegisterWorkerNode',
                request_serializer=nodepool__pb2.RegisterWorkerNodeRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/nodepool.NodeManagerService/HealthCheck',
                request_serializer=nodepool__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=nodepool__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.ReportStatus = channel.unary_unary(
                '/nodepool.NodeManagerService/ReportStatus',
                request_serializer=nodepool__pb2.ReportStatusRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetNodeList = channel.unary_unary(
                '/nodepool.NodeManagerService/GetNodeList',
                request_serializer=nodepool__pb2.GetNodeListRequest.SerializeToString,
                response_deserializer=nodepool__pb2.GetNodeListResponse.FromString,
                _registered_method=True)


class NodeManagerServiceServicer(object):
    """節點管理服務
    """

    def RegisterWorkerNode(self, request, context):
        """工作節點註冊
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康檢查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportStatus(self, request, context):
        """節點報告狀態
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeList(self, request, context):
        """獲取節點列表（新增）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorkerNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorkerNode,
                    request_deserializer=nodepool__pb2.RegisterWorkerNodeRequest.FromString,
                    response_serializer=nodepool__pb2.StatusResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=nodepool__pb2.HealthCheckRequest.FromString,
                    response_serializer=nodepool__pb2.HealthCheckResponse.SerializeToString,
            ),
            'ReportStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportStatus,
                    request_deserializer=nodepool__pb2.ReportStatusRequest.FromString,
                    response_serializer=nodepool__pb2.StatusResponse.SerializeToString,
            ),
            'GetNodeList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeList,
                    request_deserializer=nodepool__pb2.GetNodeListRequest.FromString,
                    response_serializer=nodepool__pb2.GetNodeListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nodepool.NodeManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nodepool.NodeManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeManagerService(object):
    """節點管理服務
    """

    @staticmethod
    def RegisterWorkerNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.NodeManagerService/RegisterWorkerNode',
            nodepool__pb2.RegisterWorkerNodeRequest.SerializeToString,
            nodepool__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.NodeManagerService/HealthCheck',
            nodepool__pb2.HealthCheckRequest.SerializeToString,
            nodepool__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.NodeManagerService/ReportStatus',
            nodepool__pb2.ReportStatusRequest.SerializeToString,
            nodepool__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNodeList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.NodeManagerService/GetNodeList',
            nodepool__pb2.GetNodeListRequest.SerializeToString,
            nodepool__pb2.GetNodeListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UserServiceStub(object):
    """使用者服务

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/nodepool.UserService/Register',
                request_serializer=nodepool__pb2.RegisterRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/nodepool.UserService/Login',
                request_serializer=nodepool__pb2.LoginRequest.SerializeToString,
                response_deserializer=nodepool__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.GetBalance = channel.unary_unary(
                '/nodepool.UserService/GetBalance',
                request_serializer=nodepool__pb2.GetBalanceRequest.SerializeToString,
                response_deserializer=nodepool__pb2.GetBalanceResponse.FromString,
                _registered_method=True)
        self.Transfer = channel.unary_unary(
                '/nodepool.UserService/Transfer',
                request_serializer=nodepool__pb2.TransferRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.UpdatePassword = channel.unary_unary(
                '/nodepool.UserService/UpdatePassword',
                request_serializer=nodepool__pb2.UpdatePasswordRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StatusResponse.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """使用者服务

    """

    def Register(self, request, context):
        """使用者注册
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """使用者登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """获取使用者余额
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """使用者转账
        """
        conte