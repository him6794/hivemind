syntax = "proto3";

package nodepool;
message LoginRequest { // 用戶登錄請求
    string username = 1;
    string password = 2;
}

message LoginResponse {// 用戶登錄響應
    bool success = 1;
    string message = 2;
    string token = 3;
}

message TransferRequest {// 用戶轉賬請求
    string token = 1;
    string receiver_username = 2;
    int64 amount = 3;
}

message TransferResponse {// 用戶轉賬響應
    bool success = 1;
    string message = 2;
}

message GetBalanceRequest {// 用戶查詢餘額請求
    string username = 1;
    string token = 2;
}

message GetBalanceResponse {// 用戶查詢餘額響應
    bool success = 1;
    string message = 2;
    int64 balance = 3;
}

message RegisterWorkerNodeRequest {// 工作節點註冊請求
    string node_id = 1;//用戶名
    string hostname = 2;//ip
    int32 cpu_cores = 3;
    int32 memory_gb = 4;
    int32 cpu_score = 5;
    int32 gpu_score = 6;
    int32 gpu_memory_gb = 7;
    string location = 8;
    int32 port = 9;
    string gpu_name = 12;
    string docker_status = 13;
}

message StatusResponse {// 通用狀態響應
    bool success = 1;
    string message = 2;
}
message RunningStatusRequest {// 節點狀態回報請求
    string node_id = 1;  // 節點ID，用於識別報告節點
    string status = 2;   // 節點狀態 (Idle, Busy, Error等)
    int32 cpu_usage = 3; // CPU 使用率
    int32 memory_usage = 4; //記憶體總使用量
    int32 gpu_usage = 5; // GPU 使用率
    int32 gpu_memory_usage = 6; // GPU 記憶體使用量
    string docker_status = 7; // Docker 狀態
    int32 running_tasks = 8; // 正在運行的任務數量
}
message RunningStatusResponse {// 狀態回報
    bool success = 1;
    string message = 2;
}

message UploadTaskRequest {// 用戶上傳任務請求
    string task_id = 1;
    bytes task_zip = 2;
    int32 memory_gb = 3;
    int32 cpu_score = 4;
    int32 gpu_score = 5;
    int32 gpu_memory_gb = 6;
    string location = 7;
    string gpu_name = 8;
    string token = 9;  // 用戶令牌，用於驗證
}

message UploadTaskResponse {// 用戶上傳任務響應
    bool success = 1;
    string message = 2;
}

message GetAllUserTasksRequest {// 用戶查詢所有任務請求
    string token = 1;  // 用戶令牌，用於驗證
}

message GetAllTasksResponse {// 用戶查詢所有任務響應
    repeated TaskInfo tasks = 1;
}

message TaskInfo {// 任務信息定義
    string task_id = 1;
    string status = 2;
    string message = 4;
    int32 cpu_usage = 5; // CPU 使用率
    int32 memory_usage = 6; //記憶體總使用量
    int32 gpu_usage = 7; // GPU 使用率
    int32 gpu_memory_usage = 8; // GPU 記憶體使用量
    string worker_ip = 9; // 工作節點 IP
}

message TaskOutputUploadRequest {// 任務輸出上傳請求
    string task_id = 1;
    string output = 2;
    string token = 3;  // 用戶令牌，用於驗證
}
message TaskOutputUploadResponse {// 任務輸出上傳響應
    bool success = 1;
    string message = 2;
}
message TaskResultUploadRequest {// 任務結果上傳請求
    string task_id = 1;
    bytes result_zip = 2;
    string token = 3;  // 用戶令牌，用於驗證
}
message TaskResultUploadResponse {// 任務結果上傳響應
    bool success = 1;
    string message = 2;
}

message GetTaskResultRequest {// 用戶獲取任務結果請求
    string task_id = 1;
    string token = 2;  // 用戶令牌，用於驗證
}

message GetTaskResultResponse {// 用戶獲取任務結果響應
    bool success = 1;
    string message = 2;
    bytes result_zip = 3;
}


message ExecuteTaskRequest {//推送任務給工作節點請求
    string task_id = 1;
    bytes task_zip = 2;
    int32 cpu_usage = 3;
    int32 gpu_usage = 4;
    int32 memory_gb = 5;
    int32 gpu_memory_gb = 6;
}

message ExecuteTaskResponse {//推送任務給工作節點響應
    bool success = 1;
    string message = 2;
}

message TaskOutputRequest {//獲取任務輸出請求
    string task_id = 1;
    string output = 2;
    string token = 3;  // 用戶令牌，用於驗證
}
message TaskOutputResponse {//獲取任務輸出響應
    bool success = 1;
    string message = 2;
}

message StopTaskRequest {// master用戶向nodepool停止任務請求
    string task_id = 1;
    string token = 2;
}

message StopTaskResponse {//nodepool向worker用戶停止任務響應
    bool success = 1;
    string message = 2;
}
message StopTaskExecutionRequest {// 向工作節點停止任務執行的消息
    string task_id = 1;
}

message StopTaskExecutionResponse {// 向工作節點停止任務執行的回覆
    bool success = 1;
    string message = 2;
}
message TaskUsageRequest {// 任務資源使用情況
    string task_id = 1;
    int32 cpu_usage = 2; // CPU 使用率
    int32 memory_usage = 3; //記憶體總使用量
    int32 gpu_usage = 4; // GPU 使用率
    int32 gpu_memory_usage = 5; // GPU 記憶體使用量
    string token = 6;  // 用戶令牌，用於驗證
}
message TaskUsageResponse {// 任務資源使用情況回覆
    bool success = 1;
    string message = 2;
}

message RefreshTokenRequest {// 用戶刷新令牌請求
    string old_token = 1;
}
message RefreshTokenResponse {// 用戶刷新令牌響應
    bool success = 1;
    string message = 2;
    string new_token = 3;
}
// 服務定義
service UserService {
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Transfer(TransferRequest) returns (TransferResponse); 
    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse); // 新增 GetBalance RPC
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
}

service NodeManagerService {
    rpc RegisterWorkerNode(RegisterWorkerNodeRequest) returns (StatusResponse);
    rpc ReportStatus(RunningStatusRequest) returns (RunningStatusResponse);
}

service MasterNodeService {
    rpc UploadTask(UploadTaskRequest) returns (UploadTaskResponse);
    rpc GetTaskResult(GetTaskResultRequest) returns (GetTaskResultResponse);
    rpc GetAllUserTasks(GetAllUserTasksRequest) returns (GetAllTasksResponse);
    rpc StopTask(StopTaskRequest) returns (StopTaskResponse);
}

service WorkerNodeService {
    rpc ExecuteTask(ExecuteTaskRequest) returns (ExecuteTaskResponse);
    rpc TaskOutputUpload(TaskOutputUploadRequest) returns (TaskOutputUploadResponse);
    rpc TaskResultUpload(TaskResultUploadRequest) returns (TaskResultUploadResponse);
    rpc TaskOutput(TaskOutputRequest) returns (TaskOutputResponse);
    rpc StopTaskExecution(StopTaskExecutionRequest) returns (StopTaskExecutionResponse);
    rpc TaskUsage(TaskUsageRequest) returns (TaskUsageResponse);
}