# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import nodepool_pb2 as nodepool__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in nodepool_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class UserServiceStub(object):
    """服務定義
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/nodepool.UserService/Login',
                request_serializer=nodepool__pb2.LoginRequest.SerializeToString,
                response_deserializer=nodepool__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Transfer = channel.unary_unary(
                '/nodepool.UserService/Transfer',
                request_serializer=nodepool__pb2.TransferRequest.SerializeToString,
                response_deserializer=nodepool__pb2.TransferResponse.FromString,
                _registered_method=True)
        self.GetBalance = channel.unary_unary(
                '/nodepool.UserService/GetBalance',
                request_serializer=nodepool__pb2.GetBalanceRequest.SerializeToString,
                response_deserializer=nodepool__pb2.GetBalanceResponse.FromString,
                _registered_method=True)
        self.RefreshToken = channel.unary_unary(
                '/nodepool.UserService/RefreshToken',
                request_serializer=nodepool__pb2.RefreshTokenRequest.SerializeToString,
                response_deserializer=nodepool__pb2.RefreshTokenResponse.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """服務定義
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """新增 GetBalance RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=nodepool__pb2.LoginRequest.FromString,
                    response_serializer=nodepool__pb2.LoginResponse.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=nodepool__pb2.TransferRequest.FromString,
                    response_serializer=nodepool__pb2.TransferResponse.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=nodepool__pb2.GetBalanceRequest.FromString,
                    response_serializer=nodepool__pb2.GetBalanceResponse.SerializeToString,
            ),
            'RefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshToken,
                    request_deserializer=nodepool__pb2.RefreshTokenRequest.FromString,
                    response_serializer=nodepool__pb2.RefreshTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nodepool.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nodepool.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """服務定義
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.UserService/Login',
            nodepool__pb2.LoginRequest.SerializeToString,
            nodepool__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.UserService/Transfer',
            nodepool__pb2.TransferRequest.SerializeToString,
            nodepool__pb2.TransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.UserService/GetBalance',
            nodepool__pb2.GetBalanceRequest.SerializeToString,
            nodepool__pb2.GetBalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.UserService/RefreshToken',
            nodepool__pb2.RefreshTokenRequest.SerializeToString,
            nodepool__pb2.RefreshTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorkerNode = channel.unary_unary(
                '/nodepool.NodeManagerService/RegisterWorkerNode',
                request_serializer=nodepool__pb2.RegisterWorkerNodeRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ReportStatus = channel.unary_unary(
                '/nodepool.NodeManagerService/ReportStatus',
                request_serializer=nodepool__pb2.RunningStatusRequest.SerializeToString,
                response_deserializer=nodepool__pb2.RunningStatusResponse.FromString,
                _registered_method=True)


class NodeManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterWorkerNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorkerNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorkerNode,
                    request_deserializer=nodepool__pb2.RegisterWorkerNodeRequest.FromString,
                    response_serializer=nodepool__pb2.StatusResponse.SerializeToString,
            ),
            'ReportStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportStatus,
                    request_deserializer=nodepool__pb2.RunningStatusRequest.FromString,
                    response_serializer=nodepool__pb2.RunningStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nodepool.NodeManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nodepool.NodeManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterWorkerNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.NodeManagerService/RegisterWorkerNode',
            nodepool__pb2.RegisterWorkerNodeRequest.SerializeToString,
            nodepool__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.NodeManagerService/ReportStatus',
            nodepool__pb2.RunningStatusRequest.SerializeToString,
            nodepool__pb2.RunningStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MasterNodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadTask = channel.unary_unary(
                '/nodepool.MasterNodeService/UploadTask',
                request_serializer=nodepool__pb2.UploadTaskRequest.SerializeToString,
                response_deserializer=nodepool__pb2.UploadTaskResponse.FromString,
                _registered_method=True)
        self.GetTaskResult = channel.unary_unary(
                '/nodepool.MasterNodeService/GetTaskResult',
                request_serializer=nodepool__pb2.GetTaskResultRequest.SerializeToString,
                response_deserializer=nodepool__pb2.GetTaskResultResponse.FromString,
                _registered_method=True)
        self.GetAllUserTasks = channel.unary_unary(
                '/nodepool.MasterNodeService/GetAllUserTasks',
                request_serializer=nodepool__pb2.GetAllUserTasksRequest.SerializeToString,
                response_deserializer=nodepool__pb2.GetAllTasksResponse.FromString,
                _registered_method=True)
        self.StopTask = channel.unary_unary(
                '/nodepool.MasterNodeService/StopTask',
                request_serializer=nodepool__pb2.StopTaskRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StopTaskResponse.FromString,
                _registered_method=True)
        self.GetTasklog = channel.unary_unary(
                '/nodepool.MasterNodeService/GetTasklog',
                request_serializer=nodepool__pb2.TasklogRequest.SerializeToString,
                response_deserializer=nodepool__pb2.TasklogResponse.FromString,
                _registered_method=True)


class MasterNodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllUserTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTasklog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadTask,
                    request_deserializer=nodepool__pb2.UploadTaskRequest.FromString,
                    response_serializer=nodepool__pb2.UploadTaskResponse.SerializeToString,
            ),
            'GetTaskResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskResult,
                    request_deserializer=nodepool__pb2.GetTaskResultRequest.FromString,
                    response_serializer=nodepool__pb2.GetTaskResultResponse.SerializeToString,
            ),
            'GetAllUserTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllUserTasks,
                    request_deserializer=nodepool__pb2.GetAllUserTasksRequest.FromString,
                    response_serializer=nodepool__pb2.GetAllTasksResponse.SerializeToString,
            ),
            'StopTask': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTask,
                    request_deserializer=nodepool__pb2.StopTaskRequest.FromString,
                    response_serializer=nodepool__pb2.StopTaskResponse.SerializeToString,
            ),
            'GetTasklog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTasklog,
                    request_deserializer=nodepool__pb2.TasklogRequest.FromString,
                    response_serializer=nodepool__pb2.TasklogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nodepool.MasterNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nodepool.MasterNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MasterNodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.MasterNodeService/UploadTask',
            nodepool__pb2.UploadTaskRequest.SerializeToString,
            nodepool__pb2.UploadTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.MasterNodeService/GetTaskResult',
            nodepool__pb2.GetTaskResultRequest.SerializeToString,
            nodepool__pb2.GetTaskResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllUserTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.MasterNodeService/GetAllUserTasks',
            nodepool__pb2.GetAllUserTasksRequest.SerializeToString,
            nodepool__pb2.GetAllTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.MasterNodeService/StopTask',
            nodepool__pb2.StopTaskRequest.SerializeToString,
            nodepool__pb2.StopTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTasklog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.MasterNodeService/GetTasklog',
            nodepool__pb2.TasklogRequest.SerializeToString,
            nodepool__pb2.TasklogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WorkerNodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTask = channel.unary_unary(
                '/nodepool.WorkerNodeService/ExecuteTask',
                request_serializer=nodepool__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=nodepool__pb2.ExecuteTaskResponse.FromString,
                _registered_method=True)
        self.TaskOutputUpload = channel.unary_unary(
                '/nodepool.WorkerNodeService/TaskOutputUpload',
                request_serializer=nodepool__pb2.TaskOutputUploadRequest.SerializeToString,
                response_deserializer=nodepool__pb2.TaskOutputUploadResponse.FromString,
                _registered_method=True)
        self.TaskResultUpload = channel.unary_unary(
                '/nodepool.WorkerNodeService/TaskResultUpload',
                request_serializer=nodepool__pb2.TaskResultUploadRequest.SerializeToString,
                response_deserializer=nodepool__pb2.TaskResultUploadResponse.FromString,
                _registered_method=True)
        self.TaskOutput = channel.unary_unary(
                '/nodepool.WorkerNodeService/TaskOutput',
                request_serializer=nodepool__pb2.TaskOutputRequest.SerializeToString,
                response_deserializer=nodepool__pb2.TaskOutputResponse.FromString,
                _registered_method=True)
        self.StopTaskExecution = channel.unary_unary(
                '/nodepool.WorkerNodeService/StopTaskExecution',
                request_serializer=nodepool__pb2.StopTaskExecutionRequest.SerializeToString,
                response_deserializer=nodepool__pb2.StopTaskExecutionResponse.FromString,
                _registered_method=True)
        self.TaskUsage = channel.unary_unary(
                '/nodepool.WorkerNodeService/TaskUsage',
                request_serializer=nodepool__pb2.TaskUsageRequest.SerializeToString,
                response_deserializer=nodepool__pb2.TaskUsageResponse.FromString,
                _registered_method=True)


class WorkerNodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskOutputUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskResultUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTaskExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskUsage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=nodepool__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=nodepool__pb2.ExecuteTaskResponse.SerializeToString,
            ),
            'TaskOutputUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskOutputUpload,
                    request_deserializer=nodepool__pb2.TaskOutputUploadRequest.FromString,
                    response_serializer=nodepool__pb2.TaskOutputUploadResponse.SerializeToString,
            ),
            'TaskResultUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskResultUpload,
                    request_deserializer=nodepool__pb2.TaskResultUploadRequest.FromString,
                    response_serializer=nodepool__pb2.TaskResultUploadResponse.SerializeToString,
            ),
            'TaskOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskOutput,
                    request_deserializer=nodepool__pb2.TaskOutputRequest.FromString,
                    response_serializer=nodepool__pb2.TaskOutputResponse.SerializeToString,
            ),
            'StopTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTaskExecution,
                    request_deserializer=nodepool__pb2.StopTaskExecutionRequest.FromString,
                    response_serializer=nodepool__pb2.StopTaskExecutionResponse.SerializeToString,
            ),
            'TaskUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskUsage,
                    request_deserializer=nodepool__pb2.TaskUsageRequest.FromString,
                    response_serializer=nodepool__pb2.TaskUsageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nodepool.WorkerNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nodepool.WorkerNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkerNodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.WorkerNodeService/ExecuteTask',
            nodepool__pb2.ExecuteTaskRequest.SerializeToString,
            nodepool__pb2.ExecuteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskOutputUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.WorkerNodeService/TaskOutputUpload',
            nodepool__pb2.TaskOutputUploadRequest.SerializeToString,
            nodepool__pb2.TaskOutputUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskResultUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.WorkerNodeService/TaskResultUpload',
            nodepool__pb2.TaskResultUploadRequest.SerializeToString,
            nodepool__pb2.TaskResultUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.WorkerNodeService/TaskOutput',
            nodepool__pb2.TaskOutputRequest.SerializeToString,
            nodepool__pb2.TaskOutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.WorkerNodeService/StopTaskExecution',
            nodepool__pb2.StopTaskExecutionRequest.SerializeToString,
            nodepool__pb2.StopTaskExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodepool.WorkerNodeService/TaskUsage',
            nodepool__pb2.TaskUsageRequest.SerializeToString,
            nodepool__pb2.TaskUsageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
